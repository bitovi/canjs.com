{
  "name": "es6-module-loader",
  "description": "An ES6 Module Loader shim",
  "version": "0.16.3",
  "homepage": "https://github.com/ModuleLoader/es6-module-loader",
  "author": {
    "name": "Guy Bedford, Luke Hoban, Addy Osmani",
    "email": "addyosmani@gmail.com",
    "url": "https://github.com/ModuleLoader"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ModuleLoader/es6-module-loader.git"
  },
  "bugs": {
    "url": "https://github.com/ModuleLoader/es6-module-loader/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ModuleLoader/es6-module-loader/blob/master/LICENSE-MIT"
    }
  ],
  "devDependencies": {
    "babel-core": "^4.7.16",
    "expect.js": "^0.3.1",
    "gesalakacula": "^1.0.0",
    "grunt": "~0.4.1",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-uglify": "~0.6.0",
    "grunt-esnext": "0.0.3",
    "grunt-string-replace": "^0.2.7",
    "karma": "^0.12.28",
    "karma-benchmark": "^0.4.0",
    "karma-benchmark-reporter": "^0.1.1",
    "karma-chrome-launcher": "^0.1.7",
    "karma-coverage": "^0.2.7",
    "karma-expect": "^1.1.0",
    "karma-firefox-launcher": "^0.1.3",
    "karma-mocha": "^0.1.10",
    "karma-mocha-reporter": "^0.3.1",
    "karma-sauce-launcher": "^0.2.10",
    "minimist": "^1.1.0",
    "mocha": "^2.0.1",
    "regenerator": "^0.8.9",
    "traceur": "0.0.87"
  },
  "keywords": [
    "script",
    "loader",
    "es6",
    "harmony"
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "npm run test:node && npm run test:browser",
    "test:node": "mocha test/_node-traceur.js && mocha test/_node-babel.js",
    "test:browser": "npm run test:browser-traceur && npm run test:browser-babel",
    "test:browser-traceur": "karma start --single-run",
    "test:browser-babel": "karma start --single-run --babel",
    "test:browser:perf": "karma start karma-benchmark.conf.js --single-run"
  },
  "dependencies": {
    "when": "^3.7.2"
  },
  "gitHead": "e8dbc4cb039d7ad2b6ecacd553163cb71e7c9632",
  "readme": "# ES6 Module Loader Polyfill [![Build Status][travis-image]][travis-url]\n\n_For upgrading to ES6 Module Loader 0.16, [read the release notes here](https://github.com/ModuleLoader/es6-module-loader/releases/tag/v0.16.0)._\n\nDynamically loads ES6 modules in browsers and [NodeJS](#nodejs-use) with support for loading existing and custom module formats through loader hooks.\n\nThis project implements dynamic module loading through `System` exactly to the previous ES6-specified loader API at [2014-08-24 ES6 Specification Draft Rev 27, Section 15](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#august_24_2014_draft_rev_27) and is being converted to track the newly redrafted specification at https://github.com/whatwg/loader (work in progress at https://github.com/ModuleLoader/es6-module-loader/pull/317).\n\n* Provides an asynchronous loader (`System.import`) to [dynamically load ES6 modules](#getting-started).\n* Supports both [Traceur](https://github.com/google/traceur-compiler) and [Babel](http://babeljs.io/) for compiling ES6 modules and syntax into ES5 in the browser with source map support.\n* Fully supports [ES6 circular references and live bindings](https://github.com/ModuleLoader/es6-module-loader/wiki/Circular-References-&-Bindings).\n* Includes [`baseURL` and `paths` implementations](https://github.com/ModuleLoader/es6-module-loader/wiki/Configuring-the-Loader).\n* Can be used as a [tracing tool](https://github.com/ModuleLoader/es6-module-loader/wiki/Tracing-API) for static analysis of modules.\n* Polyfills ES6 Promises in the browser with an optionally bundled ES6 promise implementation.\n* Supports IE8+, with IE9+ support for ES6 development without pre-compilation.\n* The complete combined polyfill, including ES6 promises, comes to 9KB minified and gzipped, making it suitable for production use, provided that modules are [built into ES5 making them independent of Traceur](https://github.com/ModuleLoader/es6-module-loader/wiki/Production-Workflows).\n\nFor an overview of build workflows, [see the production guide](https://github.com/ModuleLoader/es6-module-loader/wiki/Production-Workflows).\n\nFor an example of a universal module loader based on this polyfill for loading AMD, CommonJS and globals, see [SystemJS](https://github.com/systemjs/systemjs).\n\n### Documentation\n\n* [A brief overview of ES6 module syntax](https://github.com/ModuleLoader/es6-module-loader/wiki/Brief-Overview-of-ES6-Module-syntax)\n* [Configuring the loader](https://github.com/ModuleLoader/es6-module-loader/wiki/Configuring-the-Loader)\n* [Production workflows](https://github.com/ModuleLoader/es6-module-loader/wiki/Production-Workflows)\n* [Circular References &amp; Bindings](https://github.com/ModuleLoader/es6-module-loader/wiki/Circular-References-&-Bindings)\n* [Extending the loader through loader hooks](https://github.com/ModuleLoader/es6-module-loader/wiki/Extending-the-ES6-Loader)\n* [Tracing API](https://github.com/ModuleLoader/es6-module-loader/wiki/Tracing-API)\n\n### Getting Started\n\nIf using ES6 syntax (optional), include `traceur.js` or `babel.js` in the page first then include `es6-module-loader.js`:\n\n```html\n  <script src=\"traceur.js\"></script>\n  <script src=\"es6-module-loader.js\"></script>\n```\n\nTo use Babel, load Babel's `browser.js` instead and set the transpiler to `babel` with the loader configuration:\n\n```html\n<script>\n  System.transpiler = 'babel';\n</script>\n```\n\nThen we can write any ES6 module:\n\nmymodule.js:\n```javascript\n  export class q {\n    constructor() {\n      console.log('this is an es6 class!');\n    }\n  }\n```\n\nand load the module dynamically in the browser\n\n```html\n<script>\n  System.import('mymodule').then(function(m) {\n    new m.q();\n  });\n</script>\n```\n\nThe dynamic loader returns a `Module` object, which contains getters for the named exports (in this case, `q`).\n\n#### Setting transpilation options\n\nIf using Traceur, these can be set with:\n\n```javascript\nSystem.traceurOptions = {...};\n```\n\nOr with Babel:\n\n```javascript\nSystem.babelOptions = {...};\n```\n\n#### Module Tag\n\nAs well as defining `window.System`, this polyfill provides support for the `<script type=\"module\">` tag:\n\n```html\n<script type=\"module\">\n  // loads the 'q' export from 'mymodule.js' in the same path as the page\n  import { q } from 'mymodule';\n\n  new q(); // -> 'this is an es6 class!'\n</script>\n```\n\nBecause it is only possible to load ES6 modules with this tag, it is not suitable for production use in this way.\n\nSee the [demo folder](https://github.com/ModuleLoader/es6-module-loader/blob/master/demo/index.html) in this repo for a working example demonstrating module loading in the browser both with `System.import` and with the module-type script tag.\n\n#### NodeJS Use\n\n```\n  npm install es6-module-loader babel traceur\n```\n\nIt is important that Babel or Traceur is installed into the path in order to be found, since these are no longer project dependencies.\n\nFor use in NodeJS, the `Loader` and `System` globals are provided as exports:\n\nindex.js:\n```javascript\n  var System = require('es6-module-loader').System;\n  /*  \n   *  Include:\n   *    System.transpiler = 'babel'; \n   *  to use Babel instead of Traceur\n   */\n\n  System.import('some-module').then(function(m) {\n    console.log(m.p);\n  });\n```\n\nsome-module.js:\n```javascript\n  export var p = 'NodeJS test';\n```\n\nRunning the application:\n```\n> node index.js\nNodeJS test\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/cowboy/grunt).\n\n_Also, please don't edit files in the \"dist\" subdirectory as they are generated via grunt. You'll find source code in the \"lib\" subdirectory!_\n\n## Testing\n\n- `npm run test:node` will use node to  to run the tests\n- `npm run test:browser` will run `npm run test:browser-babel` and `npm run test:browser-traceur`\n- `npm run test:browser-[transpiler]` use karma to run the tests with Traceur or Babel.\n- `npm run test:browser:perf` will use karma to run benchmarks\n\n`npm run test:browser-[transpiler]` supports options after a double dash (`--`) :\n\n- You can use the `--polyfill` option to test the code with polyfill.\n\n- You can use the `--coverage` option to test and extract coverage info.\n\n- You can use the `--ie8` option to test the code in the ie8 scope only.\n\n- You can use the `--saucelabs` option to use karma and saucelabs to run the tests in various browsers.\nNote: you will need to export your username and key to launch it.\n\n  ```sh\n  export SAUCE_USERNAME={your user name} && export SAUCE_ACCESS_KEY={the access key that you see once logged in}\n  npm run test:browsers -- --saucelabs\n  ```\n\n## Credit\nCopyright (c) 2015 Luke Hoban, Addy Osmani, Guy Bedford\n\n## License\nLicensed under the MIT license.\n\n[travis-url]: https://travis-ci.org/ModuleLoader/es6-module-loader\n[travis-image]: https://travis-ci.org/ModuleLoader/es6-module-loader.svg?branch=master\n",
  "readmeFilename": "README.md",
  "_id": "es6-module-loader@0.16.3",
  "_shasum": "11fde7abb4d7542d44e40a93f4344105eb105247",
  "_from": "git://github.com/bitovi/es6-module-loader.git#v0.16.3-bitovi.5",
  "_resolved": "git://github.com/bitovi/es6-module-loader.git#e8dbc4cb039d7ad2b6ecacd553163cb71e7c9632"
}
