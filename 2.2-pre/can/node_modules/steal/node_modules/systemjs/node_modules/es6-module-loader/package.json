{
  "name": "es6-module-loader",
  "description": "An ES6 Module Loader shim",
  "version": "0.9.2",
  "homepage": "https://github.com/ModuleLoader/es6-module-loader",
  "author": {
    "name": "Guy Bedford, Luke Hoban, Addy Osmani",
    "email": "addyosmani@gmail.com",
    "url": "https://github.com/ModuleLoader"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ModuleLoader/es6-module-loader"
  },
  "bugs": {
    "url": "https://github.com/ModuleLoader/es6-module-loader/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ModuleLoader/es6-module-loader/blob/master/LICENSE-MIT"
    }
  ],
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-esnext": "0.0.3",
    "grunt-string-replace": "^0.2.7"
  },
  "keywords": [
    "script",
    "loader",
    "es6",
    "harmony"
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "main": "lib/index",
  "scripts": {
    "test": "cd test && node test"
  },
  "dependencies": {
    "grunt-contrib-uglify": "^0.6.0",
    "traceur": "0.0.66",
    "when": "^3.4.6"
  },
  "gitHead": "4f652d824bc3096117576f999428276a1f0b2f64",
  "_id": "es6-module-loader@0.9.2",
  "_shasum": "684ba56fbeb49f504b163bf609d45705ee031112",
  "_from": "es6-module-loader@0.9.2",
  "_npmVersion": "1.4.23",
  "_npmUser": {
    "name": "guybedford",
    "email": "guybedford@gmail.com"
  },
  "maintainers": [
    {
      "name": "addyosmani",
      "email": "addyo@google.com"
    },
    {
      "name": "guybedford",
      "email": "guybedford@gmail.com"
    }
  ],
  "dist": {
    "shasum": "684ba56fbeb49f504b163bf609d45705ee031112",
    "tarball": "http://registry.npmjs.org/es6-module-loader/-/es6-module-loader-0.9.2.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/es6-module-loader/-/es6-module-loader-0.9.2.tgz",
  "readme": "# ES6 Module Loader Polyfill\n\nDynamically loads ES6 modules in NodeJS and current browsers.\n\n* Implemented exactly to the July 18 2014 ES6 specification draft.\n* Provides an asynchronous loader (`System.import`) to [dynamically load ES6 modules](#basic-use).\n* Uses [Traceur](https://github.com/google/traceur-compiler) for compiling ES6 modules and syntax into ES5 in the browser with source map support.\n* Fully supports [ES6 circular references and bindings](#circular-references--bindings).\n* Polyfills ES6 Promises in the browser with an optionally bundled ES6 promise implementation.\n* [Compatible with NodeJS](#nodejs-usage) allowing for server-side module loading and tracing extensions.\n* Supports ES6 module loading in IE8+. Other ES6 features only supported by Traceur in IE9+.\n* The complete combined polyfill, including ES6 promises, comes to 8.7KB minified and gzipped, making it suitable for production use, provided that modules are [built into ES5 making them independent of Traceur](#moving-to-production).\n\nFor an overview of build workflows, [see the production guide](#moving-to-production).\n\nSee the [demo folder](https://github.com/ModuleLoader/es6-module-loader/blob/master/demo/index.html) in this repo for a working example demonstrating both module loading the module tag in the browser.\n\nFor an example of a universal module loader based on this polyfill for loading AMD, CommonJS and globals, see [SystemJS](https://github.com/systemjs/systemjs).\n\n_The current version is tested against **[Traceur 0.0.66](https://github.com/google/traceur-compiler/tree/0.0.66)**._\n\n_Note the ES6 module specification is still in draft, and subject to change._\n\n### Basic Use\n\nDownload both [es6-module-loader.js](https://raw.githubusercontent.com/ModuleLoader/es6-module-loader/v0.9.2/dist/es6-module-loader.js) and traceur.js into the same folder.\n\nIf using ES6 syntax (optional), include [`traceur.js`](https://raw.githubusercontent.com/jmcriffey/bower-traceur/0.0.66/traceur.js) in the page first then include `es6-module-loader.js`:\n\n```html\n  <script src=\"traceur.js\"></script>\n  <script src=\"es6-module-loader.js\"></script>\n```\n\nWrite an ES6 module:\n\nmymodule.js:\n```javascript\n  export class q {\n    constructor() {\n      console.log('this is an es6 class!');\n    }\n  }\n```\n\nWe can then load the module with the dynamic loader:\n\n```html\n<script>\n  System.import('mymodule').then(function(m) {\n    new m.q();\n  }).catch(console.error.bind(console));\n</script>\n```\n\nThe dynamic loader returns a `Module` object, which contains getters for the named exports (in this case, `q`).\n\n_Because the loader is promise-based we need to add a catch handler in order to detect loading errors._\n\n[Read the wiki on overview of ES6 modules and syntax](https://github.com/ModuleLoader/es6-module-loader/wiki/A-Brief-ES6-Modules-Overview).\n\n### Module Tag\n\nA simple analog to the module tag is provided with:\n\n```html\n<script type=\"module\">\n  // loads the 'q' export from 'mymodule.js' in the same path as the page\n  import { q } from 'mymodule';\n\n  new q(); // -> 'this is an es6 class!'\n</script>\n```\n\nIdeally this should be based on polyfilling the `<module>` tag, as `<script type=\"module\">` is not in the spec.\n\nAs such this approach is not really suitable for anything more than experimentation.\n\nSee an overview of the specification module tag features here - https://github.com/dherman/web-modules/blob/master/module-tag/explainer.md.\n\n### baseURL\n\nAll modules are loaded relative to the `baseURL`, which by default is set to the current page path.\n\nWe can alter this with:\n\n```javascript\n  System.baseURL = '/js/lib/';\n  System.import('module'); // now loads \"/js/lib/module.js\"\n```\n\n### Paths Implementation\n\n_Note: This is a specification under discussion and not confirmed. This implementation will likely change._\n\nThe System loader provides paths rules used by the standard `locate` function.\n\nFor example, we might want to load `jquery` from a CDN location. For this we can provide a paths rule:\n\n```javascript\n  System.paths['jquery'] = '//code.jquery.com/jquery-1.10.2.min.js';\n  System.import('jquery').then(function($) {\n    // ...\n  });\n```\n\nAny reference to `jquery` in other modules will also use this same version.\n\nIt is also possible to define wildcard paths rules. The most specific rule will be used:\n\n```javascript\n  System.paths['lodash/*'] = '/js/lodash/*.js'\n  System.import('lodash/map').then(function(map) {\n    // ...\n  });\n```\n\n### Circular References & Bindings\n\nCircular references and live bindings are fully supported identically to ES6 in this polyfill.\n\nThat is:\n* Bindings are set up before module execution.\n* Execution is run from depth-first left to right on the module tree stopping at circular references.\n* Bindings are live - an adjustment to an export of one module affects all modules importing it.\n\neven.js\n```javascript\n  import { odd } from './odd'\n\n  export var counter = 0;\n\n  export function even(n) {\n    counter++;\n    return n == 0 || odd(n - 1);\n  }\n```\n\nodd.js\n```javascript\n  import { even } from './even';\n\n  export function odd(n) {\n    return n != 0 && even(n - 1);\n  }\n```\n\n```javascript\n  System.import('even').then(function(m) {\n    m.even(10);\n    m.counter;\n    m.even(20);\n    m.counter;\n  });\n```\n\n### Moving to Production\n\nWhen in production, it is not suitable to load ES6 modules and syntax in the browser.\n\nThere is a `modules=instantiate` build output in Traceur that can be used with the ES6 Module Loader, provided it has the [System.register extension](https://github.com/systemjs/systemjs/blob/master/lib/extension-register.js)\nfrom [SystemJS](https://github.com/systemjs/systemjs).\n\nThe benefit of this output is that it provides full support for circular references and live module bindings.\n\nThis output format is explained here - https://github.com/ModuleLoader/es6-module-loader/wiki/System.register-Explained.\n\nAlternatively, Traceur can also output `amd` or `cjs` as well.\n\nA basic example of using this extension with a build would be the following:\n\n#### Building all files into one bundle\n\n1. Build all ES6 modules into ES5 System.register form:\n\n  ```\n    traceur --out app-build.js app/app.js --modules=instantiate\n  ```\n\n2. If using additional ES6 features apart from modules syntax, load [`traceur-runtime.js`](https://raw.githubusercontent.com/jmcriffey/bower-traceur/0.0.66/traceur-runtime.js) (also included in the `bin` folder when installing Traceur through Bower or npm). Then include `es6-module-loader.js` and then apply the register extension before doing the import or loading the bundle as a script:\n\n  ```html\n    <script src=\"traceur-runtime.js\"></script>\n    <script src=\"es6-module-loader.js\"></script>\n    <script>\n      /*\n       * This should be a separate external script\n       * Register function is included from https://github.com/systemjs/systemjs/blob/master/lib/extension-register.js\n       */\n      function register(loader) { \n        // ...\n      }\n\n      // this needs to be added to apply the extension\n      register(System);\n    </script>\n\n    <!-- now include the bundle -->\n    <script src=\"app-build.js\"></script>\n\n    <!-- now we can import and get modules from the bundle -->\n    <script>\n      System.import('app/app');\n    </script>\n  ```\n\n* Note that `app-build.js` must be at the base-level for this to work.\n* Also, the name we import, `app/app` must be the same name given to Traceur's compiler.\n\n#### Building into separate files\n\nWe can also build separate files with:\n\n```\n  traceur --dir app app-build --modules=instantiate\n```\n\nWith the above, we can load from the separate files identical to loading ES6.\n\n### NodeJS Usage\n\n```\n  npm install es6-module-loader\n```\n\nFor use in NodeJS, the `Loader` and `System` globals are provided as exports:\n\nindex.js:\n```javascript\n  var System = require('es6-module-loader').System;\n\n  System.import('some-module').then(function(m) {\n    console.log(m.p);\n  });\n```\n\nsome-module.js:\n```javascript\n  export var p = 'NodeJS test';\n```\n\nRunning the application:\n```\n> node index.js\nNodeJS test\n```\n\n### Tracing API\n\nThis is not in the specification, but is provided since it is such a natural extension of loading and not much code at all.\n\nEnable tracing and start importing modules:\n\n```javascript\n  loader.trace = true;\n  loader.execute = true; // optional, disables execution of module bodies\n\n  loader.import('some/module').then(function() {\n    /*\n      Now we have:\n      \n        loader.loads['some/module'] == {\n          name: 'some/module',\n          deps: ['./unnormalized', 'deps'],\n          depMap: {\n            './unnormalized': 'normalized',\n            'deps': 'deps'\n          },\n          address: '/resolvedURL',\n          metadata: { metadata object from load },\n          source: 'translated source code string',\n          kind: 'dynamic' (instantiated) or 'declarative' (ES6 module pipeline)\n        }\n\n      With the dependency load records\n        loader.loads['normalized']\n        loader.loads['deps']\n      also set.\n    */\n  });\n```\n\nThen start importing modules\n\n### Extending the Loader\n\nThe loader in its default state provides only ES6 loading.\n\nWe can extend it to load AMD, CommonJS and global scripts as well as various other custom functionality through the loader hooks.\n\n[Read the wiki on extending the loader here](https://github.com/ModuleLoader/es6-module-loader/wiki/Extending-the-ES6-Loader).\n\n### Specification Notes\n\nSee the source of https://github.com/ModuleLoader/es6-module-loader/blob/master/lib/es6-module-loader.js, which contains comments detailing the exact specification notes and design decisions.\n\nTo follow the current the specification changes, see the marked issues https://github.com/ModuleLoader/es6-module-loader/issues?labels=specification&page=1&state=open.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/cowboy/grunt).\n\n_Also, please don't edit files in the \"dist\" subdirectory as they are generated via grunt. You'll find source code in the \"lib\" subdirectory!_\n\n## Credit\nCopyright (c) 2014 Luke Hoban, Addy Osmani, Guy Bedford\n\n## License\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md"
}
